name: CI and Security

on:
  push:
    branches: [ main, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
  pull_request:
    branches: [ main, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
  schedule:
    - cron: '0 4 * * 1'  # Weekly security scan

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Build Nuxt for ESLint config
        run: |
          cd frontend
          pnpm run build

      - name: Lint JavaScript/TypeScript
        run: |
          cd frontend
          pnpm lint:ci

      - name: Check commit message format
        uses: wagoid/commitlint-github-action@v5
        if: github.event_name == 'pull_request'

      - name: Lint Python notebooks
        run: |
          pip install "black[jupyter]" flake8
          flake8 notebooks --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check notebooks

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Run frontend tests
        run: |
          cd frontend
          pnpm run dev & sleep 10 && pnpm test:ci

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
        if: always()

  dependency-scan:
    name: Scan Dependencies
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: NPM Audit
        run: |
          cd frontend
          pnpm audit --production
          
      - name: Python Safety Check
        run: |
          pip install safety
          safety check -r requirements.txt

  code-scanning:
    name: CodeQL Scan
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test-frontend]
    outputs:
      image_uri: ${{ steps.push-image.outputs.image_uri }}
    steps:
      - uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          sudo apt-get remove -y '^ghc-.*' '^dotnet-.*' '^llvm-.*' '^mono-.*' '^php.*' '^mongodb-.*' '^mysql-.*'
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          df -h

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short

      - name: Build and push Docker image
        id: push-image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=ghcr.io/${{ github.repository }}
        
      - name: Output image URI
        id: image-uri
        run: echo "image_uri=${{ steps.meta.outputs.tags }}" >> $GITHUB_OUTPUT

  test-docker:
    name: Test Docker Compose
    runs-on: ubuntu-latest
    needs: build-docker
    env:
      IMAGE_URI: ${{ needs.build-docker.outputs.image_uri }}
    steps:
      - uses: actions/checkout@v4

      - name: Pull Docker image
        run: docker pull $IMAGE_URI

      - name: Test Docker compose startup
        run: |
          # Update docker-compose.yml to use the built image
          sed -i "s|image: .*|image: $IMAGE_URI|g" docker-compose.yml
          
          docker compose up -d
          sleep 30
          curl -f http://localhost:3000 || exit 1
          curl -f http://localhost:8888 || exit 1
          docker compose down

  container-scan:
    name: Security Scan Container
    runs-on: ubuntu-latest
    needs: build-docker
    permissions:
      security-events: write
    env:
      IMAGE_URI: ${{ needs.build-docker.outputs.image_uri }}
    steps:
      - name: Pull Docker image
        run: docker pull $IMAGE_URI

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_URI }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          timeout: '10m0s'

      - name: Create empty SARIF file if missing
        run: |
          if [ ! -f "trivy-results.sarif" ]; then
            echo '{"version":"2.1.0","runs":[]}' > trivy-results.sarif
            echo "Created empty SARIF file as scan failed"
          fi

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'